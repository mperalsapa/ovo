package page

import "ovo-server/internal/model"
import "ovo-server/internal/template/shared"
import "ovo-server/internal/session"
import "strconv"
import "ovo-server/internal/template/component"
import "fmt"
import "ovo-server/internal/router"
import "time"

type ItemDetailsPageData struct {
	Item        model.Item
	UserSession session.UserSession
	User        model.User
}

templ castList(item model.Item) {
	for _, credit := range item.GetCast() {
		@component.VerticalCardTitleSubtitle(component.VerticalCardTitleSubtitleData{
			CardTitle:    credit.Person.Name,
			CardSubtitle: fmt.Sprintf("as %s", credit.Role),
			ImagePath:    "https://image.tmdb.org/t/p/w500" + credit.Person.ProfilePath,
		})
	}
}

templ seasonList(item model.Item) {
	for _, season := range item.GetSeasons() {
		@component.VerticalCardTitle(component.VerticalCardTitleData{
			CardTitle: season.Title,
			ImagePath: "https://image.tmdb.org/t/p/w500" + season.PosterPath,
			CardPath:  router.GenerateRouteWithId(router.Routes.Item, season.ID),
		})
	}
}

templ episodeList(item model.Item) {
	for _, episode := range item.GetEpisodes() {
		@component.EpisodeCard(component.EpisodeCardData{
			Episode:  episode,
			CardPath: router.GenerateRouteWithId(router.Routes.Item, episode.ID),
		})
	}
}

templ ItemDetailsPage(pageData ItemDetailsPageData) {
	@shared.UserPage(shared.UserPageData{
		Title:       pageData.Item.Title,
		UserSession: pageData.UserSession,
	}) {
		<div class="flex flex-col lg:flex-row items-start gap-8 flex-wrap item-container content">
			<img class="item-image mx-auto" src={ "https://image.tmdb.org/t/p/w500" + pageData.Item.PosterPath }/>
			<div class="flex flex-col gap-8 overflow-x-hidden w-full basis-1/2 flex-grow">
				<div class="flex flex-col gap-2">
					<h1 class="">{ pageData.Item.Title }</h1>
					if pageData.Item.Title != pageData.Item.OriginalTitle {
						<h2 class="">{ pageData.Item.OriginalTitle }</h2>
					}
					<div class="flex justify-between flex-wrap gap-4">
						<div class="flex justify-between basis-96 details">
							<span class="whitespace-nowrap">
								{ strconv.Itoa(pageData.Item.ReleaseDate.Year()) }
								if pageData.Item.ItemType == model.ItemTypeShow {
									- { strconv.Itoa(pageData.Item.EndDate.Year()) }
								}
							</span>
							if pageData.Item.Duration > 0 {
								<span class="whitespace-nowrap">
									{ pageData.Item.GetFancyDuration() }
								</span>
							}
							if pageData.Item.MetaRating > 0 {
								<div class="whitespace-nowrap">
									<span>
										{ fmt.Sprintf("%.1f", pageData.Item.MetaRating) }
									</span>
									<span class="material-symbols-outlined inline-icon">
										star
									</span>
									<span class="uppercase">
										{ pageData.Item.MetaProvider }
									</span>
								</div>
							}
							if pageData.Item.Duration > 0 {
								<span class="whitespace-nowrap">
									Ends at { time.Now().Add(pageData.Item.Duration).Format("15:04") }
								</span>
							}
						</div>
						<div class="flex gap-4">
							<button class="iframe-browser-button" data-itemID={ strconv.FormatUint(uint64(pageData.Item.ID), 10) }>
								<span class="material-symbols-outlined inline-icon">
									play_arrow
								</span>
							</button>
							<button class="watched-button" data-itemID={ strconv.FormatUint(uint64(pageData.Item.ID), 10) }>
								<span class={ "material-symbols-outlined inline-icon icon-success", templ.KV("active", pageData.User.ItemIsWatched(pageData.Item.ID)) }>
									check
								</span>
							</button>
							<button class="favorite-button" data-itemID={ strconv.FormatUint(uint64(pageData.Item.ID), 10) }>
								<span class={ "material-symbols-outlined inline-icon icon-danger",templ.KV("active", pageData.User.ItemIsFavorite(pageData.Item.ID)) }>
									favorite
								</span>
							</button>
						</div>
					</div>
				</div>
				if pageData.Item.TagLine != "" {
					<h2>{ pageData.Item.TagLine }</h2>
				}
				<p>
					{ pageData.Item.Description }
				</p>
				<div class="flex flex-col gap-4">
					if directors := pageData.Item.GetDirectors(); len(directors) > 0 {
						<div>
							<h3 class="font-bold">Directors</h3>
							<div class="flex">
								for _, director := range directors {
									<span class="comma-separated">{ director.Person.Name }</span>
								}
							</div>
						</div>
					}
					if writers := pageData.Item.GetWriters(); len(writers) > 0 {
						<div>
							<h3 class="font-bold">Writers</h3>
							<div class="flex">
								for _, writer := range writers {
									<span class="comma-separated">{ writer.Person.Name }</span>
								}
							</div>
						</div>
					}
				</div>
				if pageData.Item.ItemType == model.ItemTypeShow {
					@component.HorizontalCarrousel() {
						@seasonList(pageData.Item)
					}
				}
				if pageData.Item.ItemType == model.ItemTypeSeason {
					@episodeList(pageData.Item)
				}
				@component.HorizontalCarrousel() {
					@castList(pageData.Item)
				}
			</div>
		</div>
	}
}
